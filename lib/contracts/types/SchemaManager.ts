/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SchemaManagerInterface extends utils.Interface {
  functions: {
    "getLastSchemaIndex()": FunctionFragment;
    "getSchema(uint256)": FunctionFragment;
    "getSchemaFromVault(uint256)": FunctionFragment;
    "lastSchemaIndex()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "schemaCIDs(uint256)": FunctionFragment;
    "setLastSchemaIndexToVault(uint256)": FunctionFragment;
    "setSchema(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultSchemaIndex(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getLastSchemaIndex"
      | "getSchema"
      | "getSchemaFromVault"
      | "lastSchemaIndex"
      | "owner"
      | "renounceOwnership"
      | "schemaCIDs"
      | "setLastSchemaIndexToVault"
      | "setSchema"
      | "transferOwnership"
      | "vaultSchemaIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLastSchemaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSchema",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchemaFromVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSchemaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "schemaCIDs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastSchemaIndexToVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setSchema", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultSchemaIndex",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLastSchemaIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSchema", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSchemaFromVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSchemaIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schemaCIDs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLastSchemaIndexToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSchema", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultSchemaIndex",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SchemaSet(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SchemaSet"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SchemaSetEventObject {
  index: BigNumber;
  schemaCID: string;
}
export type SchemaSetEvent = TypedEvent<
  [BigNumber, string],
  SchemaSetEventObject
>;

export type SchemaSetEventFilter = TypedEventFilter<SchemaSetEvent>;

export interface SchemaManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SchemaManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLastSchemaIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSchema(
      schemaIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSchemaFromVault(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lastSchemaIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    schemaCIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setLastSchemaIndexToVault(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSchema(
      schemaCID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vaultSchemaIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getLastSchemaIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getSchema(
    schemaIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSchemaFromVault(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  lastSchemaIndex(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  schemaCIDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setLastSchemaIndexToVault(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSchema(
    schemaCID: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vaultSchemaIndex(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getLastSchemaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getSchema(
      schemaIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSchemaFromVault(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    lastSchemaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    schemaCIDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setLastSchemaIndexToVault(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSchema(schemaCID: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultSchemaIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SchemaSet(uint256,string)"(
      index?: BigNumberish | null,
      schemaCID?: null
    ): SchemaSetEventFilter;
    SchemaSet(
      index?: BigNumberish | null,
      schemaCID?: null
    ): SchemaSetEventFilter;
  };

  estimateGas: {
    getLastSchemaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getSchema(
      schemaIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchemaFromVault(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSchemaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    schemaCIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLastSchemaIndexToVault(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSchema(
      schemaCID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vaultSchemaIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLastSchemaIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchema(
      schemaIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchemaFromVault(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSchemaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    schemaCIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLastSchemaIndexToVault(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSchema(
      schemaCID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vaultSchemaIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
