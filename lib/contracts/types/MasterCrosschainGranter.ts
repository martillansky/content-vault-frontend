/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MasterCrosschainGranterInterface extends utils.Interface {
  functions: {
    "createVaultFromProposal(bytes32,string,string,uint256,address)": FunctionFragment;
    "masterGateway()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposalIdToVault(bytes32)": FunctionFragment;
    "proposalVaultManager()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGateway(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradePermissionVaultFromProposal(bytes32,address)": FunctionFragment;
    "upgradePermissionVaultFromProposalNativeToken(bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createVaultFromProposal"
      | "masterGateway"
      | "owner"
      | "proposalIdToVault"
      | "proposalVaultManager"
      | "renounceOwnership"
      | "setGateway"
      | "transferOwnership"
      | "upgradePermissionVaultFromProposal"
      | "upgradePermissionVaultFromProposalNativeToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createVaultFromProposal",
    values: [BytesLike, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterGateway",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalIdToVault",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVaultManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setGateway", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePermissionVaultFromProposal",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePermissionVaultFromProposalNativeToken",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createVaultFromProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalIdToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePermissionVaultFromProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePermissionVaultFromProposalNativeToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "VaultFromProposalPermissionUpgraded(bytes32,address)": EventFragment;
    "VaultFromProposalRegisteredOnHomeChain(bytes32,address)": EventFragment;
    "VaultFromProposalRegistrationRequested(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VaultFromProposalPermissionUpgraded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VaultFromProposalRegisteredOnHomeChain"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VaultFromProposalRegistrationRequested"
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VaultFromProposalPermissionUpgradedEventObject {
  proposalId: string;
  user: string;
}
export type VaultFromProposalPermissionUpgradedEvent = TypedEvent<
  [string, string],
  VaultFromProposalPermissionUpgradedEventObject
>;

export type VaultFromProposalPermissionUpgradedEventFilter =
  TypedEventFilter<VaultFromProposalPermissionUpgradedEvent>;

export interface VaultFromProposalRegisteredOnHomeChainEventObject {
  proposalId: string;
  tokenContract: string;
}
export type VaultFromProposalRegisteredOnHomeChainEvent = TypedEvent<
  [string, string],
  VaultFromProposalRegisteredOnHomeChainEventObject
>;

export type VaultFromProposalRegisteredOnHomeChainEventFilter =
  TypedEventFilter<VaultFromProposalRegisteredOnHomeChainEvent>;

export interface VaultFromProposalRegistrationRequestedEventObject {
  proposalId: string;
  tokenContract: string;
}
export type VaultFromProposalRegistrationRequestedEvent = TypedEvent<
  [string, string],
  VaultFromProposalRegistrationRequestedEventObject
>;

export type VaultFromProposalRegistrationRequestedEventFilter =
  TypedEventFilter<VaultFromProposalRegistrationRequestedEvent>;

export interface MasterCrosschainGranter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterCrosschainGranterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createVaultFromProposal(
      proposalId: BytesLike,
      name: string,
      description: string,
      chainId: BigNumberish,
      tokenContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    masterGateway(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposalIdToVault(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { proposalId: string; tokenContract: string }
    >;

    proposalVaultManager(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setGateway(
      _masterGateway: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradePermissionVaultFromProposal(
      proposalId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradePermissionVaultFromProposalNativeToken(
      proposalId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  createVaultFromProposal(
    proposalId: BytesLike,
    name: string,
    description: string,
    chainId: BigNumberish,
    tokenContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  masterGateway(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposalIdToVault(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { proposalId: string; tokenContract: string }>;

  proposalVaultManager(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setGateway(
    _masterGateway: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradePermissionVaultFromProposal(
    proposalId: BytesLike,
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradePermissionVaultFromProposalNativeToken(
    proposalId: BytesLike,
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    createVaultFromProposal(
      proposalId: BytesLike,
      name: string,
      description: string,
      chainId: BigNumberish,
      tokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    masterGateway(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposalIdToVault(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { proposalId: string; tokenContract: string }
    >;

    proposalVaultManager(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGateway(
      _masterGateway: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePermissionVaultFromProposal(
      proposalId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePermissionVaultFromProposalNativeToken(
      proposalId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "VaultFromProposalPermissionUpgraded(bytes32,address)"(
      proposalId?: BytesLike | null,
      user?: string | null
    ): VaultFromProposalPermissionUpgradedEventFilter;
    VaultFromProposalPermissionUpgraded(
      proposalId?: BytesLike | null,
      user?: string | null
    ): VaultFromProposalPermissionUpgradedEventFilter;

    "VaultFromProposalRegisteredOnHomeChain(bytes32,address)"(
      proposalId?: BytesLike | null,
      tokenContract?: string | null
    ): VaultFromProposalRegisteredOnHomeChainEventFilter;
    VaultFromProposalRegisteredOnHomeChain(
      proposalId?: BytesLike | null,
      tokenContract?: string | null
    ): VaultFromProposalRegisteredOnHomeChainEventFilter;

    "VaultFromProposalRegistrationRequested(bytes32,address)"(
      proposalId?: BytesLike | null,
      tokenContract?: string | null
    ): VaultFromProposalRegistrationRequestedEventFilter;
    VaultFromProposalRegistrationRequested(
      proposalId?: BytesLike | null,
      tokenContract?: string | null
    ): VaultFromProposalRegistrationRequestedEventFilter;
  };

  estimateGas: {
    createVaultFromProposal(
      proposalId: BytesLike,
      name: string,
      description: string,
      chainId: BigNumberish,
      tokenContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    masterGateway(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalIdToVault(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalVaultManager(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setGateway(
      _masterGateway: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradePermissionVaultFromProposal(
      proposalId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradePermissionVaultFromProposalNativeToken(
      proposalId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createVaultFromProposal(
      proposalId: BytesLike,
      name: string,
      description: string,
      chainId: BigNumberish,
      tokenContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    masterGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalIdToVault(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalVaultManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setGateway(
      _masterGateway: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradePermissionVaultFromProposal(
      proposalId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradePermissionVaultFromProposalNativeToken(
      proposalId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
