/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ProposalVaultManagerInterface extends utils.Interface {
  functions: {
    "createVaultFromProposal(bytes32,string,string,uint256,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pinVaultFromProposal(bytes32)": FunctionFragment;
    "proposalIdToVault(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setVaultMasterCrosschainGranter(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpinVaultFromProposal(bytes32)": FunctionFragment;
    "upgradePermissionVaultFromProposal(bytes32,address)": FunctionFragment;
    "vaultAccessControl()": FunctionFragment;
    "vaultCore()": FunctionFragment;
    "vaultMasterCrosschainGranter()": FunctionFragment;
    "vaultPermissions()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createVaultFromProposal"
      | "owner"
      | "pinVaultFromProposal"
      | "proposalIdToVault"
      | "renounceOwnership"
      | "setVaultMasterCrosschainGranter"
      | "transferOwnership"
      | "unpinVaultFromProposal"
      | "upgradePermissionVaultFromProposal"
      | "vaultAccessControl"
      | "vaultCore"
      | "vaultMasterCrosschainGranter"
      | "vaultPermissions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createVaultFromProposal",
    values: [BytesLike, string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pinVaultFromProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalIdToVault",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultMasterCrosschainGranter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpinVaultFromProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePermissionVaultFromProposal",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vaultCore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultMasterCrosschainGranter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPermissions",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createVaultFromProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pinVaultFromProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalIdToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultMasterCrosschainGranter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpinVaultFromProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePermissionVaultFromProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultMasterCrosschainGranter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultPermissions",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "VaultFromProposalCreated(uint256,bytes32,string,string,string,uint256,address)": EventFragment;
    "VaultFromProposalPinned(address,uint256,uint8)": EventFragment;
    "VaultFromProposalUnpinned(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultFromProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultFromProposalPinned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultFromProposalUnpinned"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VaultFromProposalCreatedEventObject {
  tokenId: BigNumber;
  proposalId: string;
  name: string;
  description: string;
  schemaCID: string;
  chainId: BigNumber;
  tokenContract: string;
}
export type VaultFromProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, string, BigNumber, string],
  VaultFromProposalCreatedEventObject
>;

export type VaultFromProposalCreatedEventFilter =
  TypedEventFilter<VaultFromProposalCreatedEvent>;

export interface VaultFromProposalPinnedEventObject {
  to: string;
  tokenId: BigNumber;
  permission: number;
}
export type VaultFromProposalPinnedEvent = TypedEvent<
  [string, BigNumber, number],
  VaultFromProposalPinnedEventObject
>;

export type VaultFromProposalPinnedEventFilter =
  TypedEventFilter<VaultFromProposalPinnedEvent>;

export interface VaultFromProposalUnpinnedEventObject {
  to: string;
  tokenId: BigNumber;
}
export type VaultFromProposalUnpinnedEvent = TypedEvent<
  [string, BigNumber],
  VaultFromProposalUnpinnedEventObject
>;

export type VaultFromProposalUnpinnedEventFilter =
  TypedEventFilter<VaultFromProposalUnpinnedEvent>;

export interface ProposalVaultManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProposalVaultManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createVaultFromProposal(
      proposalId: BytesLike,
      name: string,
      description: string,
      chainId: BigNumberish,
      tokenContract: string,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pinVaultFromProposal(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proposalIdToVault(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setVaultMasterCrosschainGranter(
      masterGranter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpinVaultFromProposal(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradePermissionVaultFromProposal(
      proposalId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vaultAccessControl(overrides?: CallOverrides): Promise<[string]>;

    vaultCore(overrides?: CallOverrides): Promise<[string]>;

    vaultMasterCrosschainGranter(overrides?: CallOverrides): Promise<[string]>;

    vaultPermissions(overrides?: CallOverrides): Promise<[string]>;
  };

  createVaultFromProposal(
    proposalId: BytesLike,
    name: string,
    description: string,
    chainId: BigNumberish,
    tokenContract: string,
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pinVaultFromProposal(
    proposalId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proposalIdToVault(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setVaultMasterCrosschainGranter(
    masterGranter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpinVaultFromProposal(
    proposalId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradePermissionVaultFromProposal(
    proposalId: BytesLike,
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vaultAccessControl(overrides?: CallOverrides): Promise<string>;

  vaultCore(overrides?: CallOverrides): Promise<string>;

  vaultMasterCrosschainGranter(overrides?: CallOverrides): Promise<string>;

  vaultPermissions(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createVaultFromProposal(
      proposalId: BytesLike,
      name: string,
      description: string,
      chainId: BigNumberish,
      tokenContract: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pinVaultFromProposal(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalIdToVault(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setVaultMasterCrosschainGranter(
      masterGranter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpinVaultFromProposal(
      proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePermissionVaultFromProposal(
      proposalId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultAccessControl(overrides?: CallOverrides): Promise<string>;

    vaultCore(overrides?: CallOverrides): Promise<string>;

    vaultMasterCrosschainGranter(overrides?: CallOverrides): Promise<string>;

    vaultPermissions(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "VaultFromProposalCreated(uint256,bytes32,string,string,string,uint256,address)"(
      tokenId?: BigNumberish | null,
      proposalId?: BytesLike | null,
      name?: null,
      description?: null,
      schemaCID?: null,
      chainId?: null,
      tokenContract?: null
    ): VaultFromProposalCreatedEventFilter;
    VaultFromProposalCreated(
      tokenId?: BigNumberish | null,
      proposalId?: BytesLike | null,
      name?: null,
      description?: null,
      schemaCID?: null,
      chainId?: null,
      tokenContract?: null
    ): VaultFromProposalCreatedEventFilter;

    "VaultFromProposalPinned(address,uint256,uint8)"(
      to?: string | null,
      tokenId?: BigNumberish | null,
      permission?: null
    ): VaultFromProposalPinnedEventFilter;
    VaultFromProposalPinned(
      to?: string | null,
      tokenId?: BigNumberish | null,
      permission?: null
    ): VaultFromProposalPinnedEventFilter;

    "VaultFromProposalUnpinned(address,uint256)"(
      to?: string | null,
      tokenId?: BigNumberish | null
    ): VaultFromProposalUnpinnedEventFilter;
    VaultFromProposalUnpinned(
      to?: string | null,
      tokenId?: BigNumberish | null
    ): VaultFromProposalUnpinnedEventFilter;
  };

  estimateGas: {
    createVaultFromProposal(
      proposalId: BytesLike,
      name: string,
      description: string,
      chainId: BigNumberish,
      tokenContract: string,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pinVaultFromProposal(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proposalIdToVault(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setVaultMasterCrosschainGranter(
      masterGranter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpinVaultFromProposal(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradePermissionVaultFromProposal(
      proposalId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vaultAccessControl(overrides?: CallOverrides): Promise<BigNumber>;

    vaultCore(overrides?: CallOverrides): Promise<BigNumber>;

    vaultMasterCrosschainGranter(overrides?: CallOverrides): Promise<BigNumber>;

    vaultPermissions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createVaultFromProposal(
      proposalId: BytesLike,
      name: string,
      description: string,
      chainId: BigNumberish,
      tokenContract: string,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pinVaultFromProposal(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proposalIdToVault(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setVaultMasterCrosschainGranter(
      masterGranter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpinVaultFromProposal(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradePermissionVaultFromProposal(
      proposalId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vaultAccessControl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultMasterCrosschainGranter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultPermissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
