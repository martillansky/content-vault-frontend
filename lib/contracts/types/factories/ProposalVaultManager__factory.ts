/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ProposalVaultManager,
  ProposalVaultManagerInterface,
} from "../ProposalVaultManager";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_vault",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "createVaultFromProposal",
    inputs: [
      {
        name: "proposalId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "description",
        type: "string",
        internalType: "string",
      },
      {
        name: "chainId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokenContract",
        type: "address",
        internalType: "address",
      },
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pinVaultFromProposal",
    inputs: [
      {
        name: "proposalId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "proposalIdToVault",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setVaultMasterCrosschainGranter",
    inputs: [
      {
        name: "masterGranter",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "unpinVaultFromProposal",
    inputs: [
      {
        name: "proposalId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgradePermissionVaultFromProposal",
    inputs: [
      {
        name: "proposalId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "vaultAccessControl",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVaultAccessControl",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "vaultCore",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVault",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "vaultMasterCrosschainGranter",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "vaultPermissions",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVaultPermissions",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "VaultFromProposalCreated",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "proposalId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "name",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "description",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "schemaCID",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "chainId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "tokenContract",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "VaultFromProposalPinned",
    inputs: [
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "permission",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "VaultFromProposalUnpinned",
    inputs: [
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AlreadyHasToken",
    inputs: [],
  },
  {
    type: "error",
    name: "CannotRevokeAccessToSelf",
    inputs: [],
  },
  {
    type: "error",
    name: "EmptyArray",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPermission",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSchemaIndex",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidUpgrade",
    inputs: [],
  },
  {
    type: "error",
    name: "MismatchedArrayLengths",
    inputs: [],
  },
  {
    type: "error",
    name: "NoAccessToRevoke",
    inputs: [],
  },
  {
    type: "error",
    name: "NoWritePermission",
    inputs: [],
  },
  {
    type: "error",
    name: "NotMasterCrosschainGranter",
    inputs: [],
  },
  {
    type: "error",
    name: "NotProposalVaultManager",
    inputs: [],
  },
  {
    type: "error",
    name: "NotVaultOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "OwnableInvalidOwner",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "OwnableUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "VaultAlreadyPinned",
    inputs: [],
  },
  {
    type: "error",
    name: "VaultDoesNotExist",
    inputs: [],
  },
  {
    type: "error",
    name: "ZeroAddress",
    inputs: [],
  },
] as const;

export class ProposalVaultManager__factory {
  static readonly abi = _abi;
  static createInterface(): ProposalVaultManagerInterface {
    return new utils.Interface(_abi) as ProposalVaultManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProposalVaultManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProposalVaultManager;
  }
}
