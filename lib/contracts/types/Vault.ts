/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface VaultInterface extends utils.Interface {
  functions: {
    "assignVaultFromProposalOwnership(uint256,address)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burnVaultAccess(address,uint256)": FunctionFragment;
    "createVault(string,string)": FunctionFragment;
    "getDomainSeparator()": FunctionFragment;
    "getLastTokenId()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getPermissionNone()": FunctionFragment;
    "getPermissionRead()": FunctionFragment;
    "getPermissionWrite()": FunctionFragment;
    "getVaultBalance(address,uint256)": FunctionFragment;
    "grantAccess(address,uint256,uint8)": FunctionFragment;
    "grantAccessWithSignature(address,uint256,uint8,uint256,bytes)": FunctionFragment;
    "hasGrantedPermission(uint256,address)": FunctionFragment;
    "incrementLastTokenId()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isPermissionVaultRead(uint256,address)": FunctionFragment;
    "isPermissionVaultWrite(uint256,address)": FunctionFragment;
    "lastTokenId()": FunctionFragment;
    "mintVaultAccess(address,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "permissions(uint256,address)": FunctionFragment;
    "proposalVaultManager()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeAccess(uint256,address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "schemaManager()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setPermissionNone(uint256,address)": FunctionFragment;
    "setPermissionRead(uint256,address)": FunctionFragment;
    "setPermissionWrite(uint256,address)": FunctionFragment;
    "setProposalVaultManager(address)": FunctionFragment;
    "setURI(string)": FunctionFragment;
    "storeContentBatch(uint256,bytes[],bool,string[])": FunctionFragment;
    "storeContentBatchWithSignature(uint256,bytes[],bool,string[],uint256,bytes)": FunctionFragment;
    "storeContentWithMetadata(uint256,bytes,bool,string)": FunctionFragment;
    "storeContentWithMetadataSigned(uint256,bytes,bool,string,uint256,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferVaultOwnership(uint256,address)": FunctionFragment;
    "upgradePermission(uint256,address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "vaultOwner(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assignVaultFromProposalOwnership"
      | "balanceOf"
      | "balanceOfBatch"
      | "burnVaultAccess"
      | "createVault"
      | "getDomainSeparator"
      | "getLastTokenId"
      | "getNonce"
      | "getPermissionNone"
      | "getPermissionRead"
      | "getPermissionWrite"
      | "getVaultBalance"
      | "grantAccess"
      | "grantAccessWithSignature"
      | "hasGrantedPermission"
      | "incrementLastTokenId"
      | "isApprovedForAll"
      | "isPermissionVaultRead"
      | "isPermissionVaultWrite"
      | "lastTokenId"
      | "mintVaultAccess"
      | "nonces"
      | "owner"
      | "permissions"
      | "proposalVaultManager"
      | "renounceOwnership"
      | "revokeAccess"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "schemaManager"
      | "setApprovalForAll"
      | "setPermissionNone"
      | "setPermissionRead"
      | "setPermissionWrite"
      | "setProposalVaultManager"
      | "setURI"
      | "storeContentBatch"
      | "storeContentBatchWithSignature"
      | "storeContentWithMetadata"
      | "storeContentWithMetadataSigned"
      | "supportsInterface"
      | "transferOwnership"
      | "transferVaultOwnership"
      | "upgradePermission"
      | "uri"
      | "vaultOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assignVaultFromProposalOwnership",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnVaultAccess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPermissionNone",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionRead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionWrite",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccessWithSignature",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGrantedPermission",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementLastTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionVaultRead",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionVaultWrite",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintVaultAccess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permissions",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVaultManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "schemaManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionNone",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionRead",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionWrite",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalVaultManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "storeContentBatch",
    values: [BigNumberish, BytesLike[], boolean, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "storeContentBatchWithSignature",
    values: [
      BigNumberish,
      BytesLike[],
      boolean,
      string[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "storeContentWithMetadata",
    values: [BigNumberish, BytesLike, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "storeContentWithMetadataSigned",
    values: [BigNumberish, BytesLike, boolean, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVaultOwnership",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePermission",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "vaultOwner",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignVaultFromProposalOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnVaultAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionNone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionWrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccessWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGrantedPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementLastTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionVaultRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionVaultWrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintVaultAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "schemaManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionNone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionWrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeContentBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeContentBatchWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeContentWithMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeContentWithMetadataSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVaultOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultOwner", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ContentStoredWithMetadata(address,uint256,bytes,bool,string,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PermissionUpgraded(address,uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "VaultAccessGranted(address,uint256,uint8)": EventFragment;
    "VaultAccessRevoked(address,uint256)": EventFragment;
    "VaultCreated(uint256,address,string,string,string)": EventFragment;
    "VaultTransferred(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContentStoredWithMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultAccessGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultAccessRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultTransferred"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ContentStoredWithMetadataEventObject {
  sender: string;
  tokenId: BigNumber;
  encryptedCID: string;
  isCIDEncrypted: boolean;
  metadata: string;
  isMetadataSigned: boolean;
}
export type ContentStoredWithMetadataEvent = TypedEvent<
  [string, BigNumber, string, boolean, string, boolean],
  ContentStoredWithMetadataEventObject
>;

export type ContentStoredWithMetadataEventFilter =
  TypedEventFilter<ContentStoredWithMetadataEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PermissionUpgradedEventObject {
  user: string;
  tokenId: BigNumber;
}
export type PermissionUpgradedEvent = TypedEvent<
  [string, BigNumber],
  PermissionUpgradedEventObject
>;

export type PermissionUpgradedEventFilter =
  TypedEventFilter<PermissionUpgradedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface VaultAccessGrantedEventObject {
  to: string;
  tokenId: BigNumber;
  permission: number;
}
export type VaultAccessGrantedEvent = TypedEvent<
  [string, BigNumber, number],
  VaultAccessGrantedEventObject
>;

export type VaultAccessGrantedEventFilter =
  TypedEventFilter<VaultAccessGrantedEvent>;

export interface VaultAccessRevokedEventObject {
  to: string;
  tokenId: BigNumber;
}
export type VaultAccessRevokedEvent = TypedEvent<
  [string, BigNumber],
  VaultAccessRevokedEventObject
>;

export type VaultAccessRevokedEventFilter =
  TypedEventFilter<VaultAccessRevokedEvent>;

export interface VaultCreatedEventObject {
  tokenId: BigNumber;
  owner: string;
  name: string;
  description: string;
  schemaCID: string;
}
export type VaultCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, string],
  VaultCreatedEventObject
>;

export type VaultCreatedEventFilter = TypedEventFilter<VaultCreatedEvent>;

export interface VaultTransferredEventObject {
  tokenId: BigNumber;
  from: string;
  to: string;
}
export type VaultTransferredEvent = TypedEvent<
  [BigNumber, string, string],
  VaultTransferredEventObject
>;

export type VaultTransferredEventFilter =
  TypedEventFilter<VaultTransferredEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assignVaultFromProposalOwnership(
      tokenId: BigNumberish,
      masterCrosschainGranter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    burnVaultAccess(
      from: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createVault(
      name: string,
      description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getLastTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNonce(signer: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPermissionNone(overrides?: CallOverrides): Promise<[number]>;

    getPermissionRead(overrides?: CallOverrides): Promise<[number]>;

    getPermissionWrite(overrides?: CallOverrides): Promise<[number]>;

    getVaultBalance(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantAccess(
      to: string,
      tokenId: BigNumberish,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantAccessWithSignature(
      to: string,
      tokenId: BigNumberish,
      permission: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasGrantedPermission(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    incrementLastTokenId(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPermissionVaultRead(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPermissionVaultWrite(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintVaultAccess(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permissions(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    proposalVaultManager(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeAccess(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    schemaManager(overrides?: CallOverrides): Promise<[string]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPermissionNone(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPermissionRead(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPermissionWrite(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProposalVaultManager(
      _manager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setURI(
      newuri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    storeContentBatch(
      tokenId: BigNumberish,
      encryptedCIDs: BytesLike[],
      areCIDsEncrypted: boolean,
      metadatas: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    storeContentBatchWithSignature(
      tokenId: BigNumberish,
      encryptedCIDs: BytesLike[],
      areCIDsEncrypted: boolean,
      metadatas: string[],
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    storeContentWithMetadata(
      tokenId: BigNumberish,
      encryptedCID: BytesLike,
      isCIDEncrypted: boolean,
      metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    storeContentWithMetadataSigned(
      tokenId: BigNumberish,
      encryptedCID: BytesLike,
      isCIDEncrypted: boolean,
      metadata: string,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferVaultOwnership(
      tokenId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradePermission(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    vaultOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  assignVaultFromProposalOwnership(
    tokenId: BigNumberish,
    masterCrosschainGranter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burnVaultAccess(
    from: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createVault(
    name: string,
    description: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getLastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(signer: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPermissionNone(overrides?: CallOverrides): Promise<number>;

  getPermissionRead(overrides?: CallOverrides): Promise<number>;

  getPermissionWrite(overrides?: CallOverrides): Promise<number>;

  getVaultBalance(
    user: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantAccess(
    to: string,
    tokenId: BigNumberish,
    permission: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantAccessWithSignature(
    to: string,
    tokenId: BigNumberish,
    permission: BigNumberish,
    deadline: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasGrantedPermission(
    tokenId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  incrementLastTokenId(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPermissionVaultRead(
    tokenId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPermissionVaultWrite(
    tokenId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  mintVaultAccess(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  permissions(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  proposalVaultManager(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeAccess(
    tokenId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  schemaManager(overrides?: CallOverrides): Promise<string>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPermissionNone(
    tokenId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPermissionRead(
    tokenId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPermissionWrite(
    tokenId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProposalVaultManager(
    _manager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setURI(
    newuri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  storeContentBatch(
    tokenId: BigNumberish,
    encryptedCIDs: BytesLike[],
    areCIDsEncrypted: boolean,
    metadatas: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  storeContentBatchWithSignature(
    tokenId: BigNumberish,
    encryptedCIDs: BytesLike[],
    areCIDsEncrypted: boolean,
    metadatas: string[],
    deadline: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  storeContentWithMetadata(
    tokenId: BigNumberish,
    encryptedCID: BytesLike,
    isCIDEncrypted: boolean,
    metadata: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  storeContentWithMetadataSigned(
    tokenId: BigNumberish,
    encryptedCID: BytesLike,
    isCIDEncrypted: boolean,
    metadata: string,
    deadline: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferVaultOwnership(
    tokenId: BigNumberish,
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradePermission(
    tokenId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vaultOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assignVaultFromProposalOwnership(
      tokenId: BigNumberish,
      masterCrosschainGranter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burnVaultAccess(
      from: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createVault(
      name: string,
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getLastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(signer: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionNone(overrides?: CallOverrides): Promise<number>;

    getPermissionRead(overrides?: CallOverrides): Promise<number>;

    getPermissionWrite(overrides?: CallOverrides): Promise<number>;

    getVaultBalance(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAccess(
      to: string,
      tokenId: BigNumberish,
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    grantAccessWithSignature(
      to: string,
      tokenId: BigNumberish,
      permission: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasGrantedPermission(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incrementLastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPermissionVaultRead(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPermissionVaultWrite(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    mintVaultAccess(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    permissions(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    proposalVaultManager(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeAccess(
      tokenId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    schemaManager(overrides?: CallOverrides): Promise<string>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionNone(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionRead(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionWrite(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposalVaultManager(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setURI(newuri: string, overrides?: CallOverrides): Promise<void>;

    storeContentBatch(
      tokenId: BigNumberish,
      encryptedCIDs: BytesLike[],
      areCIDsEncrypted: boolean,
      metadatas: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    storeContentBatchWithSignature(
      tokenId: BigNumberish,
      encryptedCIDs: BytesLike[],
      areCIDsEncrypted: boolean,
      metadatas: string[],
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    storeContentWithMetadata(
      tokenId: BigNumberish,
      encryptedCID: BytesLike,
      isCIDEncrypted: boolean,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    storeContentWithMetadataSigned(
      tokenId: BigNumberish,
      encryptedCID: BytesLike,
      isCIDEncrypted: boolean,
      metadata: string,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferVaultOwnership(
      tokenId: BigNumberish,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePermission(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    vaultOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ContentStoredWithMetadata(address,uint256,bytes,bool,string,bool)"(
      sender?: string | null,
      tokenId?: BigNumberish | null,
      encryptedCID?: null,
      isCIDEncrypted?: null,
      metadata?: null,
      isMetadataSigned?: null
    ): ContentStoredWithMetadataEventFilter;
    ContentStoredWithMetadata(
      sender?: string | null,
      tokenId?: BigNumberish | null,
      encryptedCID?: null,
      isCIDEncrypted?: null,
      metadata?: null,
      isMetadataSigned?: null
    ): ContentStoredWithMetadataEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PermissionUpgraded(address,uint256)"(
      user?: string | null,
      tokenId?: BigNumberish | null
    ): PermissionUpgradedEventFilter;
    PermissionUpgraded(
      user?: string | null,
      tokenId?: BigNumberish | null
    ): PermissionUpgradedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;

    "VaultAccessGranted(address,uint256,uint8)"(
      to?: string | null,
      tokenId?: BigNumberish | null,
      permission?: null
    ): VaultAccessGrantedEventFilter;
    VaultAccessGranted(
      to?: string | null,
      tokenId?: BigNumberish | null,
      permission?: null
    ): VaultAccessGrantedEventFilter;

    "VaultAccessRevoked(address,uint256)"(
      to?: string | null,
      tokenId?: BigNumberish | null
    ): VaultAccessRevokedEventFilter;
    VaultAccessRevoked(
      to?: string | null,
      tokenId?: BigNumberish | null
    ): VaultAccessRevokedEventFilter;

    "VaultCreated(uint256,address,string,string,string)"(
      tokenId?: BigNumberish | null,
      owner?: string | null,
      name?: null,
      description?: null,
      schemaCID?: null
    ): VaultCreatedEventFilter;
    VaultCreated(
      tokenId?: BigNumberish | null,
      owner?: string | null,
      name?: null,
      description?: null,
      schemaCID?: null
    ): VaultCreatedEventFilter;

    "VaultTransferred(uint256,address,address)"(
      tokenId?: BigNumberish | null,
      from?: string | null,
      to?: string | null
    ): VaultTransferredEventFilter;
    VaultTransferred(
      tokenId?: BigNumberish | null,
      from?: string | null,
      to?: string | null
    ): VaultTransferredEventFilter;
  };

  estimateGas: {
    assignVaultFromProposalOwnership(
      tokenId: BigNumberish,
      masterCrosschainGranter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnVaultAccess(
      from: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createVault(
      name: string,
      description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getLastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(signer: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionNone(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionRead(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionWrite(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultBalance(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAccess(
      to: string,
      tokenId: BigNumberish,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantAccessWithSignature(
      to: string,
      tokenId: BigNumberish,
      permission: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasGrantedPermission(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementLastTokenId(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPermissionVaultRead(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPermissionVaultWrite(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    mintVaultAccess(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permissions(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalVaultManager(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeAccess(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    schemaManager(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPermissionNone(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPermissionRead(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPermissionWrite(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProposalVaultManager(
      _manager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setURI(
      newuri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    storeContentBatch(
      tokenId: BigNumberish,
      encryptedCIDs: BytesLike[],
      areCIDsEncrypted: boolean,
      metadatas: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    storeContentBatchWithSignature(
      tokenId: BigNumberish,
      encryptedCIDs: BytesLike[],
      areCIDsEncrypted: boolean,
      metadatas: string[],
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    storeContentWithMetadata(
      tokenId: BigNumberish,
      encryptedCID: BytesLike,
      isCIDEncrypted: boolean,
      metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    storeContentWithMetadataSigned(
      tokenId: BigNumberish,
      encryptedCID: BytesLike,
      isCIDEncrypted: boolean,
      metadata: string,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferVaultOwnership(
      tokenId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradePermission(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vaultOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignVaultFromProposalOwnership(
      tokenId: BigNumberish,
      masterCrosschainGranter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnVaultAccess(
      from: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createVault(
      name: string,
      description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissionNone(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPermissionRead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPermissionWrite(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultBalance(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAccess(
      to: string,
      tokenId: BigNumberish,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantAccessWithSignature(
      to: string,
      tokenId: BigNumberish,
      permission: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasGrantedPermission(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementLastTokenId(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPermissionVaultRead(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPermissionVaultWrite(
      tokenId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintVaultAccess(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permissions(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalVaultManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeAccess(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    schemaManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPermissionNone(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPermissionRead(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPermissionWrite(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProposalVaultManager(
      _manager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setURI(
      newuri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    storeContentBatch(
      tokenId: BigNumberish,
      encryptedCIDs: BytesLike[],
      areCIDsEncrypted: boolean,
      metadatas: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    storeContentBatchWithSignature(
      tokenId: BigNumberish,
      encryptedCIDs: BytesLike[],
      areCIDsEncrypted: boolean,
      metadatas: string[],
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    storeContentWithMetadata(
      tokenId: BigNumberish,
      encryptedCID: BytesLike,
      isCIDEncrypted: boolean,
      metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    storeContentWithMetadataSigned(
      tokenId: BigNumberish,
      encryptedCID: BytesLike,
      isCIDEncrypted: boolean,
      metadata: string,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferVaultOwnership(
      tokenId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradePermission(
      tokenId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
