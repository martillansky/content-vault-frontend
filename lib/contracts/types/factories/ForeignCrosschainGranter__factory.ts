/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ForeignCrosschainGranter,
  ForeignCrosschainGranterInterface,
} from "../ForeignCrosschainGranter";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "foreignGateway",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proposalIdToVault",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "proposalId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tokenContract",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "registerVaultFromProposalOnTokenHomeChain",
    inputs: [
      {
        name: "proposalId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tokenContract",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setGateway",
    inputs: [
      {
        name: "_foreignGateway",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgradePermissionVaultFromProposal",
    inputs: [
      {
        name: "proposalId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "VaultFromProposalPermissionUpgradeRequested",
    inputs: [
      {
        name: "proposalId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "user",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "VaultFromProposalRegisteredOnForeignChain",
    inputs: [
      {
        name: "proposalId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "tokenContract",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "GatewayDoesNotExist",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSender",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidTokenAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidTokenContract",
    inputs: [],
  },
  {
    type: "error",
    name: "NotEnoughBalance",
    inputs: [],
  },
  {
    type: "error",
    name: "OwnableInvalidOwner",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "OwnableUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ProposalAlreadyRegistered",
    inputs: [],
  },
  {
    type: "error",
    name: "VaultFromProposalDoesNotExist",
    inputs: [],
  },
] as const;

export class ForeignCrosschainGranter__factory {
  static readonly abi = _abi;
  static createInterface(): ForeignCrosschainGranterInterface {
    return new utils.Interface(_abi) as ForeignCrosschainGranterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ForeignCrosschainGranter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ForeignCrosschainGranter;
  }
}
